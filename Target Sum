class Solution {
public:
    int sum(int idx,vector<int> &nums,int s,int offset,int target,vector<vector<int>> &dp) {
        if(idx == nums.size()) {
            if(s == target) return 1;
            return 0;
        }
        if(dp[idx][s+offset]!=-1) return dp[idx][s+offset];
        int minus = sum(idx+1,nums,s-nums[idx],offset,target,dp);
        int plus = sum(idx+1,nums,s+nums[idx],offset,target,dp);
        return dp[idx][s+offset] =  plus + minus;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sumNums = 0;
        for(int i:nums) sumNums+=i;
        if(abs(target) > sumNums) return 0;
        int offset = sumNums;
        vector<vector<int>> dp(n+1,vector<int>(2*sumNums+1,-1));
        return sum(0,nums,0,offset,target,dp);
    }
};
