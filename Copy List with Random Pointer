class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) return nullptr;
        
        unordered_map<Node*, Node*> old_to_new;
        
        Node* curr = head;
        while (curr) {
            old_to_new[curr] = new Node(curr->val);
            curr = curr->next;
        }
        
        curr = head;
        while (curr) {
            old_to_new[curr]->next = old_to_new[curr->next];
            old_to_new[curr]->random = old_to_new[curr->random];
            curr = curr->next;
        }
        
        return old_to_new[head];
    }
};

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) 
    {
        Node* temp = head;
        while(temp!=NULL)
        {
            Node* copynode = new Node(temp->val);
            Node* front = temp->next;
            temp->next = copynode;
            copynode -> next = front;


            temp = front;
        }
        temp = head;
        while(temp!=NULL)
        {
            if(temp->random!=NULL)
            temp->next->random = temp -> random ->next;
            
            temp = temp -> next -> next;

        }
        
        Node* dummy = new Node(-1);
        Node* res = dummy;
        temp = head;
        while(temp!=NULL)
        {
            res->next = temp->next;
            temp->next = temp->next->next;
            res = res->next;
            temp = temp->next;
        }
        return dummy->next;
        
    }
};
