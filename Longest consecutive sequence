// class Solution {
// public:
//     int longestConsecutive(vector<int>& arr) 
//     {
//         if(arr.size() == 0 || arr.size() == 1)
//         return arr.size();
//         sort(arr.begin(),arr.end());
//         set<int> st;
//         for(int i = 0;i<arr.size();i++)
//         st.insert(arr[i]);
//         int c = 1;int maxi = -1;
//         for (auto it = st.begin(); it != st.end(); it++)
//         {
//             if(*it-*(it+1) == -1)
//             c++;
//             else
//             {
//                 if(c>maxi)
//                 maxi = c;
//             }
//         }
//         return max(c,maxi);
        
//     }
// };
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();
        if(n == 0){
            return 0;
        }
        sort(nums.begin(), nums.end());
        int currentConsecutiveSequence = 1;
        int longestConsecutiveSequence = 0;
        for(int i=1; i<n; i++){
            if(nums[i] != nums[i-1]){
                if(nums[i] == nums[i-1] + 1){
                    currentConsecutiveSequence++;
                }
                else{
                    longestConsecutiveSequence = max(longestConsecutiveSequence, currentConsecutiveSequence);
                    currentConsecutiveSequence = 1;
                }
            }
        }
        return max(longestConsecutiveSequence, currentConsecutiveSequence);
    }
};
