class Solution {
public:
    int f(int ind,int target,vector<int> &nums,vector<vector<int>> &dp)
    {
        if(target == 0)
            return 1;
        if(ind == 0)
        {
            if(target == nums[0])
            return 1;
                return 0;
        }
        if(ind<0)
            return 0;
        if(dp[ind][target]!=-1)
            return dp[ind][target];
        int pick = 0;
        if(nums[ind]<=target)
            pick = f(ind-1,target,nums,dp);
        int notpick = f(ind-1,target - nums[ind],nums,dp);
        return dp[ind][target] = pick + notpick;
    }
    int numSubseq(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(target + 1, -1));
        return f(n-1,target,nums,dp);
    }
};
