// /**
//  * Definition for singly-linked list.
//  * struct ListNode {
//  *     int val;
//  *     ListNode *next;
//  *     ListNode() : val(0), next(nullptr) {}
//  *     ListNode(int x) : val(x), next(nullptr) {}
//  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
//  * };
//  */
// class Solution {
// public:
// ListNode* merge(ListNode* l1,ListNode* l2)
// {
//     if(l1 == NULL )
//     return l2;
//     if(l2 == NULL)
//     return l1;
//     ListNode* list1 = l1;
//     ListNode* list2 = l2;
//     ListNode* dummy = new ListNode(-1);
//     ListNode* res = dummy;
//     while(list1!=NULL && list2!=NULL)
//     {
//         if(list1->val < list2->val)
//         {
//             dummy->next = list1;
//             list1 = list1->next;
//             dummy = list1;
//         }
//         else
//         {
//             dummy -> next = list2;
//             list2 = list2->next;
//             dummy = list2;
//         }
//     if(list1!=NULL)
//     dummy ->next = list1;
//     else
//     dummy->next = list2;
//     }
//     return res->next;

// }
//     ListNode* mergeKLists(vector<ListNode*>& lists) {
//         if (lists.empty())
//             return nullptr;
//         ListNode* head = lists[0];
//         for(int i = 1;i<lists.size();i++)
//         {
//             head = merge(head,lists[i]);
//         }
//         return head;
//     }
// };
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* l1, ListNode* l2) {
        if (l1 == nullptr)
            return l2;
        if (l2 == nullptr)
            return l1;

        ListNode* dummy = new ListNode(-1); 
        ListNode* current = dummy; 

        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val < l2->val) {
                current->next = l1;
                l1 = l1->next;
                current = current->next;
            } else {
                current->next = l2;
                l2 = l2->next;
                current = current->next;
            }
        }

        if (l1 != nullptr)
            current->next = l1;
        else
            current->next = l2;

        ListNode* result = dummy->next;
        delete dummy; 
        return result;
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty())
            return nullptr;

        ListNode* head = lists[0];
        for (int i = 1; i < lists.size(); i++) {
            head = merge(head, lists[i]);
        }
        return head;
    }
};
