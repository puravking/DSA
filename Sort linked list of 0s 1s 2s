/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* sortList(Node *head)
{
    
    int z,o,t = 0;
    Node* temp = head;
    while(temp!=NULL)
    {
        if( temp->data == 0 )
        z++;
        else if( temp->data == 1 )
        o++;
        else if( temp->data == 2 )
        t++;
        temp = temp -> next;
    }
    temp = head;
    while(temp != NULL)
    {
        if(z != 0)
        {
            temp->data = 0;
            z--;
        }
        else if(o != 0)
        {
            temp->data = 1;
            o--;
        }
        else if(t != 0)
        {
            temp->data = 2;
            t--;
        }
        temp = temp -> next;
    }
    return head;
}


2nd method
/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* sortList(Node *head){
    // Write your code here.
    if(head == NULL || head -> next == NULL)
    return head;
    Node* zerodummy = new Node(-1);
    Node* zero = zerodummy;
    Node* onedummy = new Node(-1);
    Node* one = onedummy;
    Node* twodummy = new Node(-1);
    Node* two = twodummy;
    Node* current = head;
    while(current!=NULL)
    {
        if(current -> data == 0)
        {
            zero ->next = current;
            zero = zero ->next;
        }
        
        else if(current -> data == 1)
        {
            one ->next = current;
            one = one ->next;
        }
        
        else if(current -> data == 2)
        {
            two ->next = current;
            two = two ->next;
        }
        
        current = current->next;
    }
    if(onedummy->next == NULL)
    zero -> next = twodummy -> next;
    else
    zero -> next = onedummy -> next;
    one -> next = twodummy->next;
    two ->next = NULL;
    delete zerodummy;
    delete onedummy;
    delete twodummy;
    return zerodummy->next;
}
